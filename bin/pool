#!/usr/bin/ruby
$:.unshift(File.join(File.dirname(__FILE__)))
gem 'auser-poolparty'
require 'poolparty'

def display_config_data
  PoolParty.message <<-EOM
Starting #{PoolParty::Application.app_name ? "#{PoolParty::Application.app_name} " : "" }cloud
  On #{PoolParty::Application.ami}
  Minimum instances: #{PoolParty::Application.minimum_instances}
  Maximum instances: #{PoolParty::Application.maximum_instances}
  Polling every: #{PoolParty::Application.polling_time}
  Keypair: #{PoolParty::Application.keypair}
  Access key: #{PoolParty::Application.access_key}
  size: #{PoolParty::Application.size}
  Monitors available:
  --------------
  #{PoolParty.registered_monitors.collect {|a| "   #{a}"}}
  
  Plugins:
  --------------
#{Dir["#{PoolParty::Application.plugin_dir}/*"].collect {|a| "   #{File.basename(a)}"}.join("\n")}

  EOM
end

# Set defaults
options = PoolParty.options(:optsparse => 
  {:banner => <<-EOU
Usage: pool [OPTIONS] {start | stop | list | clouds_list | maintain | restart | install | configure | grow | shrink | ssh | switch}
-----------------------------------------------------------------
    EOU
    })

PoolParty.load_app
master = PoolParty::Master.new
list = PoolParty::Optioner.parse(ARGV.dup, %w(-v))

display_config_data

list.each do |cmd|
  case cmd
  when "start"  
    master.start_cloud!
  when "show"
    display_config_data
  when "grow"
    master.grow_by
  when "shrink"
    master.shrink_by
  when "install"
    master.install_cloud(true)
  when "configure"
    master.setup_cloud
  when "ssh"
    list.shift
    PoolParty.message "Running #{list} on the cloud"
    master.ssh list.shift
  when "stop"
    PoolParty.message "Stopping cloud"
    master.request_termination_of_all_instances  
  when "list"
    puts master.list
  when "size"
    puts master.nodes.size
  when "clouds_list"
    puts master.clouds_list
  when "maintain"
    PoolParty.message "Maintaining cloud"
    master.start_monitor!
  when "restart"
    PoolParty.message "Restarting cloud"
    master.request_termination_of_all_instances
    master.start_cloud!
  when "switch"
    list.shift
    context = list.shift
    context ? `source ~/.#{context}_pool_keys` : puts("You must supply a context to switch to")
  else
    puts master.list
  end
end